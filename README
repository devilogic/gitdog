[整体简介]
为了能使用免费的github公有库，所以才开发了此套工作在git上层的加解密程序。
在git提交代码时进行加密，在git拉下代码时进行解密。每个在项目组里的人都有
一个授权文件，每个源文件只有项目的owner与授权人才可以解密源文件。如果一个
人想要访问某个源文件必须同时拥有当前文件被授权人的所有授权才可以加解密，
用此种手段来实现源代码风险分摊。一个人想要拿到所有代码必须拥有项目组里其他
所有人的授权才可以。

[owner]
一个项目只能有一个owner，owner最大的作用就是分发自己的授权，并且对项目组其
他人的授权进行合法性签名，来证明此授权属于合法范围

[授权文件]
每个人对于每个项目都有一个授权文件，这个授权文件即是自己的公钥 + 所属项目
文件头。所以每个人可以通过验证来判断是否属于自己的公钥

[授权合法性]
授权文件必须被owner授权后，其文件才在本项目中具有合法性。

[公私钥对]
每个人都有一对公私钥对，对于每个项目仅使用自己的公钥制作项目的授权

[关于新旧文件的加密]
新文件：
使用owner的授权 + 创建者的授权 加密
旧文件：
使用owner的授权 + 创建者的授权 + 已授权者的授权 + 新授权者的授权 加密

[解密流程]
1.签出所有加密文件
2.依次判断加密文件的授权状态是否与授权文件池中的授权文件对应
3.如果对应，则依次从加密文件中取出每个人授权文件的签名，并使用owner的公钥来
验证签名，如果验证正确则解密
4.不对应或者授权文件验证失败则退出

[加密流程]
新文件：
1.创建新文件
2.使用owner的公钥验证创建者公钥，如果验证失败则退出
3.使用owner的授权 + 创建者的授权 加密新文件

旧文件：
1.修改文件后
2.使用owner的公钥依次验证所有要进行加密的授权文件进行验证
3.使用owner的授权 + 创建者的授权 + 已授权者的授权 + 新授权者的授权 加密

[加解密方式]
使用每个授权文件的MD5值字符串的总和字符串的MD5作为密码对文件进行加密

[密码算法]
HASH算法：MD5
签名算法：ECC
加解密算法：RC6
